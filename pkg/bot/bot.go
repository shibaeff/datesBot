package bot

import (
	"log"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"

	"echoBot/pkg/models"
	"echoBot/pkg/store"
)

const (
	waiting          = -1
	defaultBunchSize = 5
	registerCommand  = "/register"
	nextCommand      = "/next"
	usersCommand     = "/users"
	helpCommand      = "/help"
	likeCommand      = "/like"
	matchesCommand   = "/matches"

	greetMsg          = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤. –ù–∞—á–Ω–∏—Ç–µ —Å /register."
	notUnderstood     = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é"
	alreadyRegistered = "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!"
	notRegistered     = "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!"

	helpMsg = "üîç –ü–æ–∏—Å–∫:\n‚Ä¢ /next ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É\n‚Ä¢ /matches ‚Äî –≤–∑–∞–∏–º–Ω—ã–µ –ª–∞–π–∫–∏\n‚Ä¢ /info ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n\nüìã –ü—Ä–æ—Ñ–∏–ª—å:\n‚Ä¢ /profile ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n‚Ä¢ /register ‚Äî –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ \n‚Ä¢ /photo ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ \n‚Ä¢ /faculty ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç\n‚Ä¢ /about ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ \n‚Ä¢ /settings ‚Äî –ø—Ä–æ—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n\n‚öôÔ∏è –ü—Ä–æ—á–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n‚Ä¢ /start ‚Äî –æ–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞\n‚Ä¢ /help ‚Äî –≤—ã–∑–æ–≤ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n‚Ä¢ /cancel ‚Äî –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏\n‚Ä¢ /reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏ (–∞–∫–∫—É—Ä–∞—Ç–Ω–æ!)"
)

var (
	registerButton = tgbotapi.KeyboardButton{Text: registerCommand}
	helpButton     = tgbotapi.KeyboardButton{Text: helpCommand}
	nextButton     = tgbotapi.KeyboardButton{Text: nextCommand}
	usersButton    = tgbotapi.KeyboardButton{Text: likeCommand}
	menuButtons    = []tgbotapi.KeyboardButton{registerButton, helpButton, nextButton, usersButton}
	menuKeyboard   = tgbotapi.NewReplyKeyboard(menuButtons)
)

type Bot interface {
	Reply(message *tgbotapi.Message) (interface{}, error)
}

type bot struct {
	store store.Store
	api   *tgbotapi.BotAPI
}

// var Users = make(map[int64]bool)

func (b *bot) Reply(message *tgbotapi.Message) (reply interface{}, err error) {
	user, err := b.store.GetUser(message.Chat.ID)
	if err != nil {
		reply = replyWithText(greetMsg)
		err = b.store.PutUser(&models.User{
			Name:       message.Chat.FirstName,
			Faculty:    "",
			Gender:     "",
			WantGender: "",
			About:      "",
			Id:         message.Chat.ID,
			PhotoLink:  "",
			RegiStep:   waiting,
			UserName:   message.Chat.UserName,
		})
		return
	}
	if user.RegiStep != waiting && user.RegiStep < regOver {
		reply = b.registerFlow(user, message)
		return
	}
	if message.IsCommand() {
		switch message.Text {
		case helpCommand:
			reply = replyWithText(helpMsg)
			return
		case registerCommand:
			if user.RegiStep >= regOver {
				reply = replyWithText(alreadyRegistered)
				return
			}
			reply = b.registerFlow(user, message)
			return
		case nextCommand:
			if user.RegiStep < regOver {
				reply = replyWithText(notRegistered)
				return
			}
			newuser, e := b.store.GetAny(user.Id)
			if e != nil {
				reply = replyWithText("–ù–µ –º–æ–∂–µ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç")
				return
			}
			e = b.store.PutSeen(user.Id, newuser.Id)
			if e != nil {
				reply = replyWithText("–ù–µ –º–æ–∂–µ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç")
				return
			}
			reply = replyWithPhoto(newuser, message.Chat.ID)
			return
		case likeCommand:
			entry, e := b.store.GetSeen(user.Id)
			if e != nil {
				reply = replyWithText("failed to put your like")
				return
			}
			likee := entry.Whome[len(entry.Whome)-1]
			e = b.store.PutLike(user.Id, likee)
			if e != nil {
				reply = replyWithText("failed to put your like")
				return
			}
			reply = replyWithText("–£—Å–ø–µ—à–Ω—ã–π –ª–∞–π–∫!")
			return
		case usersCommand:
			if user.RegiStep < regOver {
				reply = replyWithText(notRegistered)
				return
			}
			usersString, err := b.listUsers()
			if err != nil {
				return nil, err
			}
			reply = replyWithText(usersString)
			return reply, nil
		}
	}
	reply = replyWithText(notUnderstood)
	return
}

func (b *bot) listUsers() (str string, err error) {
	users, err := b.store.GetBunch(defaultBunchSize)
	if err != nil {
		log.Fatal(err)
		return
	}
	var raw []string
	for _, user := range users {
		raw = append(raw, user.String())
	}
	return strings.Join(raw, "\n"), nil
}

func NewBot(store store.Store, api *tgbotapi.BotAPI) (b Bot) {
	b = &bot{store: store, api: api}
	return b
}
